import logging
from pydoc_data.topics import topics

from pymsgbox import prompt
from selenium.webdriver.common.devtools.v85.runtime import await_promise
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.error import TelegramError
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, ContextTypes, CommandHandler, MessageHandler, \
    filters, ConversationHandler
from dotenv import load_dotenv
import os
from chatgpt import ChatGptService
from util import (load_message, send_text, send_image, show_main_menu,
                  default_callback_handler, load_prompt)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ config.evn
dotenv_path = os.path.join(os.getcwd(), 'config.evn')

load_dotenv(dotenv_path=dotenv_path)

# –°—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ .env
CHATGPT_TOKEN = os.getenv("CHATGPT_API_TOKEN")
TELEGRAM_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –Ω–µ —Ä–∞–≤–Ω—ã None
if not CHATGPT_TOKEN:
    print("CHATGPT_API_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")
if not TELEGRAM_TOKEN:
    print("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env")

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
chat_gpt = ChatGptService(CHATGPT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
EDUCATION, EXPERIENCE, SKILLS = range(3)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–∞–Ω–Ω—ã–µ –æ –ª–∏—á–Ω–æ—Å—Ç—è—Ö –∏ –∏—Ö promts
PERSONALITIES = {
    "Albert Einstein": "You are Albert Einstein. You speak like a physicist, always insightful and logical.",
    "Leonardo da Vinci": "You are Leonardo da Vinci. You speak like an artist and inventor, full of curiosity.",
    "Cleopatra": "You are Cleopatra. You speak like an ancient queen, wise and regal."
}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)

    try:
        # –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥
        commands = {
            'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
            'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
            'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
            'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
            'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
            'cv': '–°–æ–∑–¥–∞–π —Ä–µ–∑—é–º–µ'
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
        await show_main_menu(update, context, commands)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /random
async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π prompt
    prompt_fact = load_prompt("random_fact")
    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º GPT
    fact = await chat_gpt.send_question(prompt_fact, "")

    # –ö–Ω–æ–ø–∫–∏
    buttons = [
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–µ–Ω—é
        [InlineKeyboardButton("–•–æ—á—É –µ—â—ë —Ñ–∞–∫—Ç", callback_data="random")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –µ—â—ë —Ñ–∞–∫—Ç–∞
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await send_image(update, context, 'random', caption=fact, reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt
async def gpt_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        if not update.message or not update.message.text:
            await context.bot.send_message(chat_id=update.effective_chat.id,
                                           text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–∑–≤–∞–Ω–∞ –ª–∏ –∫–æ–º–∞–Ω–¥–∞ /gpt –∏–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message.text.startswith("/gpt"):
            # –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            user_text = update.message.text.replace("/gpt", "").strip()
            if not user_text:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å")
                return
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤–æ–ø—Ä–æ—Å
            user_text = update.message.text.strip()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º prompt
        prompt_gpt = load_prompt('gpt')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
        await send_image(update, context, 'gpt')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ ChatGPT
        answer = await chat_gpt.send_question(prompt_gpt, user_text)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT
        if not answer.strip():
            answer = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."

        # –ö–Ω–æ–ø–∫–∏
        buttons = [
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")],
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="gpt")]
        ]
        keyboard = InlineKeyboardMarkup(buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text(answer, reply_markup=keyboard)

    except Exception as e:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        logger.error(f"–û—à–∏–±–∫–∞ –≤ gpt_question: {e}")
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã: {e}"
        )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
async def talk_to_celebrity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π
    buttons = [[InlineKeyboardButton(name, callback_data=name)] for name in PERSONALITIES.keys()]
    keyboard = InlineKeyboardMarkup(buttons)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞
    await send_image(update, context, 'talk', caption="–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏
async def personality_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    try:
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–í—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å: {query.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å
        personality = query.data
        if personality not in PERSONALITIES:
            logger.error(f"–õ–∏—á–Ω–æ—Å—Ç—å '{personality}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º prompt –¥–ª—è –æ–±—â–µ–Ω–∏—è
        context.user_data['personality_prompt'] = PERSONALITIES[personality]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {personality}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!"
        )
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ Telegram API: {e}")
        await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_message = update.message.text

    # –ü–æ–ª—É—á–∞–µ–º prompt –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏
    personality_prompt = context.user_data.get('personality_prompt', "")
    if not personality_prompt:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –¥–ª—è –æ–±—â–µ–Ω–∏—è.")
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â–∏–π prompt
    loaded_prompt = load_prompt("chatgpt_prompt")
    prompt = personality_prompt + "\n\n" + loaded_prompt + "\n\n" + user_message

    # –ó–∞–ø—Ä–æ—Å –∫ ChatGPT
    try:
        response = await chat_gpt.send_question(prompt, user_message)
        bot_reply = response.strip() or "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        buttons = [[InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")]]
        keyboard = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(bot_reply, reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /quiz
async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –∑–∞–ø—Ä–æ—Å –∏–∑ callback_query
        message = update.message or update.callback_query.message

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        buttons = [
            [InlineKeyboardButton(topic, callback_data=f"quiz_{topic}")] for topic in
            ["Science", "History", "Literature"]
        ]
        keyboard = InlineKeyboardMarkup(buttons)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã
        await message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –∫–≤–∏–∑–∞:", reply_markup=keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∫–≤–∏–∑–∞: {e}")
        # –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–æ–º—É –∂–µ –æ–±—ä–µ–∫—Ç—É message
        message = update.message or update.callback_query.message
        await message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∫–≤–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–≤–∏–∑–∞
async def quiz_topic_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    try:
        topic = query.data.split('_')[1]
        logger.info(f"–í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {topic}")

        prompt = load_prompt('quiz')
        question = await chat_gpt.send_question(prompt, "")
        if not question.strip():
            question = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É."

        context.user_data['quiz_topic'] = topic
        context.user_data['quiz_question'] = question

        buttons = [
            [InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å", callback_data="quiz_answer")],
            [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="quiz_change_topic")],
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑", callback_data="start")]
        ]
        keyboard = InlineKeyboardMarkup(buttons)
        await query.message.reply_text(f"–í–æ–ø—Ä–æ—Å: {question}", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–º—ã –∫–≤–∏–∑–∞: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
async def quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text.strip()
    topic = context.user_data.get('quiz_topic', None)
    question = context.user_data.get('quiz_question', None)

    if not topic or not question:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑ —Å –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã.")
        return

    try:
        prompt = f"–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ '{user_message}' –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–º–µ '{topic}': {question}"
        answer = await chat_gpt.send_question(prompt, user_message)
        if not answer.strip():
            answer = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        buttons = [
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å", callback_data="quiz")],
            [InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", callback_data="quiz_change_topic")],
            [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å –∫–≤–∏–∑", callback_data="start")]
        ]
        keyboard = InlineKeyboardMarkup(buttons)
        await update.message.reply_text(f"–í–∞—à –æ—Ç–≤–µ—Ç: {user_message}\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {answer}", reply_markup=keyboard)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–≤–∏–∑: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–º–µ–Ω—ã —Ç–µ–º—ã
async def quiz_change_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await quiz(update, context)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /cv (–Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ)
async def start_resume(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º callback_query, –∞ –Ω–µ message
    callback_query = update.callback_query
    await callback_query.answer()  # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ callback_query.message
    await callback_query.message.reply_text('–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∑—é–º–µ. –ù–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.')
    return EDUCATION

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
async def education_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_education = update.message.text
    context.user_data['education'] = user_education
    await update.message.reply_text(f'–¢–≤–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {user_education}. –î–∞–≤–∞–π —Ç–µ–ø–µ—Ä—å –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —Ç–≤–æ–µ–º –æ–ø—ã—Ç–µ —Ä–∞–±–æ—Ç—ã.')
    return EXPERIENCE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø—ã—Ç–∞ —Ä–∞–±–æ—Ç—ã
async def experience_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_experience = update.message.text
    context.user_data['experience'] = user_experience
    await update.message.reply_text(f'–¢–≤–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {user_experience}. –¢–µ–ø–µ—Ä—å, –¥–∞–≤–∞–π –æ–±—Å—É–¥–∏–º —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏.')
    return SKILLS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–≤—ã–∫–æ–≤
async def skills_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_skills = update.message.text
    context.user_data['skills'] = user_skills
    await update.message.reply_text(f'–¢–≤–æ–∏ –Ω–∞–≤—ã–∫–∏: {user_skills}. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é! –†–µ–∑—é–º–µ –≥–æ—Ç–æ–≤–æ.')

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—é–º–µ
    resume = f"""
    –†–µ–∑—é–º–µ:
    –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {context.user_data['education']}
    –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {context.user_data['experience']}
    –ù–∞–≤—ã–∫–∏: {context.user_data['skills']}
    """

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—é–º–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    buttons = [
        [InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="cv")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ
        [InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="start")]  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    ]
    keyboard = InlineKeyboardMarkup(buttons)

    await update.message.reply_text(resume, reply_markup=keyboard)

    return ConversationHandler.END

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ –æ—Ç–º–µ–Ω–µ–Ω.")
    return ConversationHandler.END

# –û–±–Ω–æ–≤–ª—è–µ–º ConversationHandler
cv_conversation_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_resume, pattern="^cv$")],
    states={
        EDUCATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, education_step)],
        EXPERIENCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, experience_step)],
        SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, skills_step)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–¥–µ—Å—å –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
)




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def buttons_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()  # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å, –∏–Ω–∞—á–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç.

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, –µ—Å–ª–∏ —ç—Ç–æ –≤—ã–±–æ—Ä –ª–∏—á–Ω–æ—Å—Ç–∏
    if query.data in PERSONALITIES.keys():
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å, –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—â–µ–Ω–∏–µ
        await personality_choice(update, context)
        return

    if query.data == "start":
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ó–∞–∫–æ–Ω—á–∏—Ç—å" (callback_data="start"), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="start")],
                [InlineKeyboardButton("–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†", callback_data="random")],
                [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ", callback_data="gpt")],
                [InlineKeyboardButton("–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§", callback_data="talk")],
                [InlineKeyboardButton("–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì", callback_data="quiz")],
                [InlineKeyboardButton("–°–æ–∑–¥–∞–π —Ä–µ–∑—é–º–µ", callback_data='cv')]
            ])
        )

    elif query.data == "random":
        await random_fact(update, context)


    elif query.data == "cv":
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑—é–º–µ
        await start_resume(update, context)

    elif query.data == "gpt":
        await query.message.reply_text(
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ GPT ü§ñ!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É:\n\n"
            "–í–∞—à –≤–æ–ø—Ä–æ—Å",
            parse_mode="Markdown"
        )

    elif query.data == "talk":
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è —Å –ª–∏—á–Ω–æ—Å—Ç—å—é
        await talk_to_celebrity(update, context)

    elif query.data == "quiz":
        await query.message.reply_text("–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–≤–∏–∑ ‚ùì!")
        await quiz(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–º—ã –∫–≤–∏–∑–∞
    elif query.data.startswith("quiz_"):
        await quiz_topic_choice(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞
    elif query.data == "quiz_answer":
        await quiz_answer(update, context)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã
    elif query.data == "quiz_change_topic":
        await quiz_change_topic(update, context)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
app.add_handler(CommandHandler("start", start))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
app.add_handler(CommandHandler("random", random_fact))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random
app.add_handler(CommandHandler("gpt", gpt_question))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /gpt
app.add_handler(cv_conversation_handler)
app.add_handler(CommandHandler("quiz", quiz))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–≤–∏–∑–∞
app.add_handler(CallbackQueryHandler(quiz_topic_choice, pattern="^quiz_"))  # –í—ã–±–æ—Ä —Ç–µ–º—ã –∫–≤–∏–∑–∞
app.add_handler(CallbackQueryHandler(quiz_change_topic, pattern="quiz_change_topic"))  # –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–º—É –∫–≤–∏–∑–∞
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_answer))  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–≤–∏–∑
app.add_handler(CommandHandler("talk", talk_to_celebrity))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /talk
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))  # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
app.add_handler(CallbackQueryHandler(personality_choice,
                                     pattern="^(Albert Einstein|Leonardo da Vinci|Cleopatra)$"))  # –í—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
app.add_handler(CallbackQueryHandler(buttons_handler))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–≤—è–∑–∞–Ω —Å —Ä–µ–∑—é–º–µ

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app.run_polling()
